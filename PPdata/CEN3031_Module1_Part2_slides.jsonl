{
 "id": "CEN3031_Module1_Part2::slide0001::chunk0001",
 "document": "CEN 3031 Software Engineering Fundamentals\nIntroduction – Part 2\n\nLecture Goals\n(Re-)visit SE life-cycle Describe the SW process: Requirements Analysis Design Implementation Test Postdelivery maintenance Cost of detecting and correcting faults Retirement",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 1,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0002::chunk0001",
 "document": "General Issues\nA large number of software projects fail Never delivered/completed Do not meet requirements / user needs Excessive failures (bugs) Excessively over budget / Late Quality and reliability of many software systems cannot be formally assessed Prolonged “Software Crisis”",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 2,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0003::chunk0001",
 "document": "SE Process\nA structured approach to the development of software products and associated artifacts A structured set of activities or tasks required to develop a software system Artifact: component of SW product e.g. specs doc, manual, code module, … [ Sommerville ]",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 3,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0004::chunk0001",
 "document": "Software Engn Life-Cycle\nThe steps ( phases ) to follow when building software Life-cycle models : theoretically describe what should happen For example, classical life-cycle model:",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 4,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0005::chunk0001",
 "document": "Overview of the Requirements Workflow\nAim: To determine the client’s needs First, gain an understanding of the application domain (or domain, for short) The specific business environment in which the software product is to operate E.g. Help understand the domain vocabulary Second, build a business model If at any time the client does not feel that the cost is justified, development may terminate immediately",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 5,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0006::chunk0001",
 "document": "Requirements Issues\nDo clients know what they want? Need? Understanding application domain Moving Target Problem A change in the requirements while the software product is being developed Feature Creep: add \"just another little feature\"... Any change made to a software product can potentially cause a regression fault A fault in an apparently unrelated part of the software",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 6,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0007::chunk0001",
 "document": "The Analysis Workflow\nAim: To analyze and refine the requirements Why not do this during the requirements workflow? Artifacts of requirements workflow must be expressed in a natural (human) language",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 7,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0008::chunk0001",
 "document": "The Specification Document\nSRS: Software Requirements Specification or “Specifications” Specify exactly WHAT the product is supposed to do Detailed functionality but also requirements such as performance, security Constitutes a contract must not have imprecise phrases like “optimal,” or “98% complete” Having complete and correct specifications is essential for Cost/Time Estimates Testing Maintenance",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 8,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0009::chunk0001",
 "document": "Software Project Management Plan (SPMP)\nIn the classical model, once client has signed off the specifications, detailed planning and estimating begins We draw up the software project management plan, including Cost estimate Duration estimate Deliverables Milestones Budget This is the earliest possible time for the SPMP",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 9,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0010::chunk0001",
 "document": "The Design Workflow\nAim: refine analysis workflow until material is in form that can be implemented by the programmers Classical: Architecture (blueprint) then Detailed Design Many requirements need to be finalized at this time, including Choice of programming language Reuse issues Portability issues",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 10,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0011::chunk0001",
 "document": "The Implementation Workflow\nAim: To implement the target software product in selected implementation language Following the design A large software product is partitioned into subsystems The subsystems consist of components or code artifacts",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 11,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0012::chunk0001",
 "document": "The Test Workflow\nThe test workflow is the responsibility of Every developer and maintainer, and Software Quality Assurance (SQA) group Traceability of artifacts: important requirement for successful testing Every item in analysis, design, implementation artifacts must be traceable to an item in requirements artifacts Test not only code – but analysis & design artifacts as well",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 12,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0013::chunk0001",
 "document": "HOW do we test Analysis & Design Artifacts?\nAnalysis artifacts should be checked by means of a review Goal: are the analysis artifacts correct? Meeting – includes representatives of client and of the analysis team Design reviews are essential A client representative is not usually present Design team + SQA go through design as a whole and each design artifact separately e.g. check for logic faults, interface faults, non-conformance to specs",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 13,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0014::chunk0001",
 "document": "Test - Implementation Artifacts\nEach component is tested as soon as implemented Unit testing At end of each iteration, completed components are combined & tested Integration testing When product appears to be complete, tested as a whole Product testing Once completed product has been installed on client’s computer, the client tests it Acceptance testing",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 14,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0015::chunk0001",
 "document": "Postdelivery Maintenance\nEssential component of software development More $$ spent on postdelivery maintenance than on all other activities combined Problems can be caused by Lack of documentation of all kinds Two types of testing needed Testing changes made during postdelivery maintenance Regression testing All previous test cases (and their expected outcomes) need to be retained & used in regression testing\nTime (= Cost) of Postdelivery Maintenance",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 15,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0016::chunk0001",
 "document": "Cost of Detecting and Correcting Faults\nThe cost of detecting and correcting a fault at each phase Cost of Detecting and Correcting Faults The earlier we detect and correct a fault, the less it costs us Why? By how much? See previous slide Cost of Detecting and Correcting Faults To correct a fault early in the life cycle Usually just a document needs to be changed To correct a fault late in the life cycle Change the code and the documentation Test the change itself Perform regression testing Reinstall the product on the client’s site(s)",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 16,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0017::chunk0001",
 "document": "Retirement\nSoftware can be unmaintainable because… Drastic change in design Product must be implemented on new HW, OS, etc Documentation missing or inaccurate These are instances of maintenance (rewriting of existing software) True retirement is a rare event occurs when client organization no longer needs functionality provided by product",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 17,
  "chunk_index": 1
 }
}
{
 "id": "CEN3031_Module1_Part2::slide0018::chunk0001",
 "document": "Summary\nRevisited SE life-cycle Described the SW process: Requirements Analysis Design Implementation Test Postdelivery maintenance Cost of detecting and correcting faults Retirement",
 "metadata": {
  "file_name": "CEN3031_Module 1_intro - Part 2.pptx",
  "slide_index": 18,
  "chunk_index": 1
 }
}
